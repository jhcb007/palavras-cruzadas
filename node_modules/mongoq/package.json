{
  "name": "mongoq",
  "version": "0.2.5",
  "description": "Use mongoDB like this: require('mongoq')('testdb').collection('users').find(function(err, cursor){});",
  "keywords": [
    "mongodb",
    "mongoq",
    "data",
    "datastore",
    "nosql"
  ],
  "author": {
    "name": "Hidden",
    "email": "zzdhidden@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/zzdhidden/mongoq.git"
  },
  "dependencies": {
    "mongodb": "^1.4.35",
    "jquery-deferred": "^0.2.0"
  },
  "devDependencies": {
    "mocha": "*",
    "connect": "*",
    "should": ">=0.2.1"
  },
  "main": "index",
  "engines": {
    "node": ">=0.4.0"
  },
  "readme": "\nMongoQ\n============================\n\nUse mongoDB like this: \n\n`mongoq(\"testdb\").collection(\"users\").find().toArray().done( function(docs){} ).fail( function(err){} )`;\n\nBase on [node-mongodb-native][mongodb-native]\n\n\nFeatures\n-----------------------------\n\n*\tStandard [connection string format][connection string]\n*\tFull [node-mongodb-native][mongodb-native] methods supports\n*\tChainable api\n*\tIntroduce into [jQuery Deferred][jquery-deferred] which is based on the [CommonJS Promises/A][promises-a] design. => v0.2\n*\tControl-flow => v0.2\n\n\nInstallation\n-----------------------------\n\n>     npm install mongoq\n\nExample\n-----------------------------\n\n>     var assert = require(\"assert\")\n>     \t, mongoq = require(\"../index.js\")\n>     \t, db = mongoq(\"mongodb://127.0.0.1:27017/mongoqTest\")\n>     \t, User = db.collection(\"users\");\n> \n>     User.remove() //clear test date\n>     \t.done( function() {\n>     \t\tUser.insert( [{ _id: 1, name: \"Jack\", age: 22 }, { _id: 2, name: \"Lucy\", age: 20 }] ) //Add Jack and Lucy\n>     \t\t\t.and( User.insert( { _id: 3, name: \"Mike\", age: 21 } ) ) //Add Mike synchronous\n>     \t\t\t.and( function(u1, u2) {\n>     \t\t\t\t// Will find after add Jack, Lucy and Mike\n>     \t\t\t\treturn User.findOne( { name: u2[0][\"name\"] } )\n>     \t\t\t} )\n>     \t\t\t.done( function(u1, u2, u3) { //All be done\n>     \t\t\t\tassert.deepEqual( u1, [{ _id: 1, name: \"Jack\", age: 22 }, { _id: 2, name: \"Lucy\", age: 20 }], \"Insert first\" );\n>     \t\t\t\tassert.deepEqual( u2, [{ _id: 3, name: \"Mike\", age: 21 }], \"insert second\" );\n>     \t\t\t\tassert.deepEqual( u3, { _id: 3, name: \"Mike\", age: 21 }, \"Find after insert\" );\n>     \t\t\t\tdb.close();\n>     \t\t\t} )\n>     \t\t\t.fail( function( err ) { // Any error occur\n>     \t\t\t\tconsole.log( err );\n>     \t\t\t} );\n>     \t} )\n>     \t.fail( function( err ) { // Faild to remove\n>     \t\tconsole.log( err );\n>     \t} );\n> \n\nWork like node-mongodb-native\n-----------------------------------------\n\nMongoq bridge all the methods and events from [mongodb native database][mongodb-native-database] and [mongodb native collections][mongodb-native-collections], and make it chainable.\n\n###Access BSON\n\n>     var mongoq = require(\"mongoq\");\n>\n>     var BSON = mongoq.BSON;\n>     var ObjectID = BSON.ObjectID;\n>\n\n###Database\n\nProvide a simple [connection string][connection string]\n\n>     var mongoq = require(\"mongoq\");\n>\n>     //use default server localhost:27017, poolSize 1\n>     var db = mongoq(\"testdb\"); \n>\n>     //use options\n>     db = mongoq(\"testdb\", {host: \"127.0.0.1\", port: \"27017\"}); \n>\n>     //connection string\n>     db = mongoq(\"mongodb://localhost/testdb\"); \n>\n>     // Connect and login to the \"testdb\" database as user \"admin\" with passowrd \"foobar\"\n>     db = mongoq(\"mongodb://admin:foobar@localhost:27017/testdb?poolSize=2\");\n>\n>     //Repl set servers\n>     db = mongoq(\"mongodb://admin:foobar@localhost:27017,localhost:27018/testdb?reconnectWait=2000;retries=20\");\n>\n>     //Add user\n>     db.addUser(\"admin\", \"foobar\", function(err) {});\n\nmethods\n\n*\tclose(callback)\n*\tadmin(callback)\n*\tcollectionNames(collectionName?, callback) \n*\tcollection(collectionName, options?, callback)\n*\tcollections(callback)\n*\tdereference(dbRef, callback)\n*\tlogout(options, callback) Logout user from server, Fire off on all connections and remove all auth info\n*\tauthenticate(username, password, callback)\n*\taddUser(username, password, callback)\n*\tremoveUser(username, callback)\n*\tcreateCollection(collectionName, options?, callback)\n*\tdropCollection(collectionName, callback)\n*\trenameCollection(fromCollection, toCollection, callback)\n*\tlastError(options, connectionOptions, callback) \n*\terror(options, callback)\n*\tlastStatus(callback) \n*\tpreviousErrors(callback)\n*\texecuteDbCommand(commandHash, options?, callback)\n*\texecuteDbAdminCommand(commandHash, callback)\n*\tresetErrorHistory(callback)\n*\tcreateIndex(collectionName, fieldOrSpec, options?, callback) Create an index on a collection\n*\tensureIndex(collectionName, fieldOrSpec, options?, callback) Ensure index, create an index if it does not exist\n*\tdropIndex(collectionName, indexName, callback) Drop Index on a collection\n*\tindexInformation(collectionName, options..., callback) \n*\tdropDatabase(callback)\n*\tcursorInfo(callback) Fetch the cursor information\n*\texecuteCommand(dbCommand, options, callback)\n\n\n###Collection\n\n>     var mongoq = require(\"mongoq\");\n>     var db = mongoq(\"mongodb://localhost/testdb\"); \n>     var users = db.collection(\"users\");\n>     users.insert({name: \"Jack\", phone: 1234567, email: \"jake@mail.com\"});\n\nmethods\n\n*\tinsert (docs, options?, callback?) \n*\tremove (selector?, options?, callback?) \n*\trename (newName, callback) \n*\tinsertAll (docs, options?, callback?) \n*\tsave (doc, options?, callback?)\n*\tupdate (selector, document, options?, callback?) //  options:upsert,multi,safe\n*\tdistinct (key, query?, callback?) \n*\tcount (query?, callback)\n*\tdrop (callback) \n*\tfindAndModify (query, sort, doc, options?, callback?) // options: remove,unshift,new\n*\tfind () //return Cursor\n*\tfindOne (queryObject, options?, callback) \n*\tcreateIndex (fieldOrSpec, options, callback?)\n*\tensureIndex (fieldOrSpec, options, callback?)\n*\tindexInformation (options, callback)\n*\tdropIndex (name, callback)\n*\tdropIndexes (callback)\n*\tmapReduce (map, reduce, options, callback)\n*\tgroup (keys, condition, initial, reduce, command, callback)\n*\toptions (callback)\n\n\n###Cursor\n\n>     var mongoq = require(\"mongoq\");\n>     var db = mongoq(\"mongodb://localhost/testdb\"); \n>     var users = db.collection(\"users\");\n>     var cursor = users.find();\n>     cursor.toArray(function(err, users){\n>     \tdb.close();\n>     });\n\n\nmethods\n\n*\ttoArray(callback)\n*\teach(callback)\n*\tcount(callback)\n*\tsort(keyOrList, direction) //=> this\n*\tlimit(limit) //=> this\n*\tskip(limit) //=> this\n*\tbatchSize(limit) //=> this\n*\tnextObject(callback)\n*\tgetMore(callback)\n*\texplain(callback)\n\n<a name=\"mongoq\"></a>\n\nMongoQ style\n-----------------------------\n\n###Deferred Object\n\nMongoQ introduce into jQuery Deferred since v0.2, you can find more documents about jQuery Deferred Object at [here][jquery-deferred].\n\nMongoQ make all mongodb asynchronous processes to return with a Promise Object.\n\n>     var mongoq = require(\"mongoq\");\n>     var db = mongoq(\"mongodb://localhost/testdb\"); \n>     var users = db.collection(\"users\");\n>     users.find().toArray()\n>         .done( function( docs ) { \n>             //=> users\n>         } )\n>         .done( function( docs ) { \n>             //=> users\n>         } )\n>         .fail( function( error ) { \n>             //=> error\n>         } )\n>         .then( function( docs ) { \n>             //=> users\n>         }, function( error ) { \n>             //=> error\n>         } );\n\nmethods\n\n*\tdone( doneCallbacks [, doneCallbacks] ) //=> Add handlers to be called when the Deferred object is resolved.\n*\tfail( failCallbacks [, failCallbacks] ) //=> Add handlers to be called when the Deferred object is rejected.\n*\tthen( doneCallbacks, failCallbacks ) //=> Add handlers to be called when the Deferred object is resolved or rejected.\n*\talways( alwaysCallbacks ) //=> Add handlers to be called when the Deferred object is either resolved or rejected.\n\n\n**Notice**: Please don't use `find().each().done(...`, the callbacks will be called only once.\n\n\n###Control-flow\n\nMongoQ add two methods called `and` and `next` to the Promise Object for the mongodb's parallel execution, serial execution and error handling painless.\n\n**and**: run promise object series or parallel and then serialize the result\n\n>     var mongoq = require(\"mongoq\");\n>     var db = mongoq(\"mongodb://localhost/testdb\"); \n>     var users = db.collection(\"users\");\n>     var messages = db.collection(\"messages\");\n>     users.count()\n>         .and( users.findOne() ) // parallel\n>         .and( function( user ) { // serial when in function\n>             return user ? messages.find({ user: user._id }).toArray() : [];\n>         } )\n>         .done( function( num, user, msgs ) {\n>             //num from users.count\n>             //user from users.findOne\n>             //msgs from messages.find\n>         } )\n>         .fail( function( err ) {} );\n\n**next**: run promise object series then give the result to the next\n\n>     var mongoq = require(\"mongoq\");\n>     var db = mongoq(\"mongodb://localhost/testdb\"); \n>     var users = db.collection(\"users\");\n>     var messages = db.collection(\"messages\");\n>     users.findOne()\n>         .next( function( user ) { // serial when in function\n>             return user ? messages.find({ user: user._id }).toArray() : [];\n>         } )\n>         .done( function( msgs ) {\n>             //msgs from messages.find\n>         } )\n>         .fail( function( err ) {} );\n\n\nContributor\n-----------------------------\n\n* Caio Ribeiro Pereira (caio.ribeiro.pereira@gmail.com)\n\n\nLicense \n-----------------------------\n\n(The MIT License)\n\nCopyright (c) 2011 hidden &lt;zzdhidden@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[mongodb-native]: https://github.com/christkv/node-mongodb-native\n[mongodb-native-database]: https://github.com/christkv/node-mongodb-native/blob/master/docs/database.md\n[mongodb-native-collections]: https://github.com/christkv/node-mongodb-native/blob/master/docs/collections.md\n[promises-a]: http://wiki.commonjs.org/wiki/Promises/A\n[jquery-deferred]: http://api.jquery.com/category/deferred-object/\n[connection-string]: http://www.mongodb.org/display/DOCS/Connections\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/zzdhidden/mongoq/issues"
  },
  "_id": "mongoq@0.2.5",
  "dist": {
    "shasum": "2007993f0ab93c9a737306b2e720314ab82e32c4"
  },
  "_from": "mongoq@",
  "_resolved": "https://registry.npmjs.org/mongoq/-/mongoq-0.2.5.tgz"
}
